generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified Boolean? @default(false)
  picture       String?

  role                   UserRole                 @default(USER)
  loans                  Loan[]                   @relation("UserLoans")
  // reservations           Reservation[]
  requests               Request[]
  bookmarks              Bookmark[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  sessions               Session[]
  EmailVerificationToken EmailVerificationToken[]
}

model Book {
  id          String     @id @default(cuid())
  title       String
  description String     @db.Text
  isbn        String     @unique
  publishedAt DateTime
  authorId    String
  categoryId  String
  copies      Int
  pictureUrl  String
  loans       Loan[]     @relation("BookLoans")
  // reservations Reservation[]
  bookmarks   Bookmark[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      Author     @relation(fields: [authorId], references: [id])
  category    Category   @relation(fields: [categoryId], references: [id])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Author {
  id        String   @id @default(cuid())
  name      String
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loan {
  id         String     @id @default(cuid())
  userId     String
  bookId     String
  status     LoanStatus @default(PENDING)
  loanedAt   DateTime?
  dueDate    DateTime
  returnedAt DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  user User @relation("UserLoans", fields: [userId], references: [id])
  book Book @relation("BookLoans", fields: [bookId], references: [id])
}

// model Reservation {
//   id         String   @id @default(cuid())
//   userId     String
//   bookId     String
//   reservedAt DateTime @default(now())
//   expiresAt  DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id])
//   book Book @relation(fields: [bookId], references: [id])
// }

model Request {
  id          String        @id @default(cuid())
  userId      String
  type        RequestType
  description String        @db.Text
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum LoanStatus {
  PENDING
  ACTIVE
  OVERDUE
  RETURNED
  CANCELLED
}

enum RequestType {
  BOOK_SUGGESTION
  COMPLAINT
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  DECLINED
  ADDRESSED
}
