generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  role         UserRole      @default(USER)
  loans        Loan[]        @relation("UserLoans")
  reservations Reservation[]
  requests     Request[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Book {
  id           Int           @id @default(autoincrement())
  title        String
  description  String        @db.Text
  isbn         String        @unique
  publishedAt  DateTime
  authorId     Int
  categoryId   Int
  copies       Int
  pictureUrl   String
  loans        Loan[]        @relation("BookLoans")
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  author   Author   @relation(fields: [authorId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loan {
  id         Int       @id @default(autoincrement())
  userId     Int
  bookId     Int
  loanedAt   DateTime  @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation("UserLoans", fields: [userId], references: [id])
  book Book @relation("BookLoans", fields: [bookId], references: [id])
}

model Reservation {
  id         Int      @id @default(autoincrement())
  userId     Int
  bookId     Int
  reservedAt DateTime @default(now())
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

model Request {
  id          Int           @id @default(autoincrement())
  userId      Int
  type        RequestType
  description String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum RequestType {
  BOOK_SUGGESTION
  COMPLAINT
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  DECLINED
  ADDRESSED
}
